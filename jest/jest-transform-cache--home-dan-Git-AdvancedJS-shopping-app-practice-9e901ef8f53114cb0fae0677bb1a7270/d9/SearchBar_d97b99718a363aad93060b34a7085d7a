'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _propTypes = require('prop-types');var _propTypes2 = _interopRequireDefault(_propTypes);
var _reactBootstrap = require('react-bootstrap');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

SearchBar = function (_Component) {_inherits(SearchBar, _Component);
  function SearchBar(props) {_classCallCheck(this, SearchBar);var _this = _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this,
    props));
    _this.handleFilterTextInputChange = _this.handleFilterTextInputChange.bind(_this);
    _this.handleInStockInputChange = _this.handleInStockInputChange.bind(_this);return _this;
  }_createClass(SearchBar, [{ key: 'handleFilterTextInputChange', value: function handleFilterTextInputChange(

    e) {
      this.props.onFilterTextInput(e.target.value);
    } }, { key: 'handleInStockInputChange', value: function handleInStockInputChange(

    e) {
      this.props.onInStockInput(e.target.checked);
    } }, { key: 'render', value: function render()

    {
      return (
        _react2.default.createElement(_reactBootstrap.Panel, null,
          _react2.default.createElement('form', null,
            _react2.default.createElement(_reactBootstrap.FormControl, {
              id: 'searchbar-input',
              type: 'text',
              placeholder: 'Search...',
              value: this.props.filterText,
              onChange: this.handleFilterTextInputChange }),

            _react2.default.createElement(_reactBootstrap.Checkbox, {
                id: 'checkbox-inStock',
                checked: this.props.inStockOnly,
                onChange: this.handleInStockInputChange }, 'Only show in-stock items'))));





    } }]);return SearchBar;}(_react.Component);exports.default = SearchBar;


SearchBar.propTypes = {
  onFilterTextInput: _propTypes2.default.func,
  onInStockInput: _propTypes2.default.func,
  filterText: _propTypes2.default.string,
  inStockOnly: _propTypes2.default.bool };